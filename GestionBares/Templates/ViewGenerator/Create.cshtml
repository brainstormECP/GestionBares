@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:
        @:
    }
    else
    {
        @:@@{
        @:Layout = null;
        @:}
        @:




        @:<!DOCTYPE html>
        @:
        @:<html>
        @:<head>
            @:<meta name="viewport" content="width=device-width" />
            @:<title>@Model.ViewName</title>
        @:</head>
        @:<body>
            @:
            //    PushIndent("    ");
        }

        @:<div class="container-fluid">
            @:<h3>Crear @Model.ViewDataTypeShortName</h3>
            @:<hr />
            @:<div class="row">
                @:<div class="col-md-12">
                    @:<form asp-action="@Model.ViewName">
                        @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        foreach (var property in Model.ModelMetadata.Properties)
                        {
                            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                            {
                                if (property.IsForeignKey)
                                {
                                    @:<div class="form-group col-md-4">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                                    @:</div>
                                    continue;
                                }

                                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                                if (isCheckbox)
                                {
                                    @:<div class="form-group col-md-4">
                                        @:<label class="control-label">@@Html.DisplayNameFor(model => model.@GetValueExpression(property))</label>
                                        @:<div class="">
                                            @:<input type="checkbox" class="make-switch" data-on-text="Si" data-off-text="No" asp-for="@property.PropertyName" />
                                        @:</div>
                                    @:</div>
                                }
                                else if (property.IsEnum && !property.IsEnumFlags)
                                {
                                    @:<div class="form-group col-md-4">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<select asp-for="@property.PropertyName" class="form-control" chosen=""></select>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                                else if (property.IsMultilineText)
                                {
                                    @:<div class="form-group col-md-4">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                                else
                                {
                                    @:<div class="form-group col-md-4">
                                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                                        @:<input asp-for="@property.PropertyName" class="form-control" />
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                    @:</div>
                                }
                            }
                        }
}
<div class="form-group col-md-12 text-right">
    <input type="submit" value="Crear" class="btn btn-success" />
    <a asp-action="Index" class="btn btn-default">Atrás</a>
</div>
</form>
</div>
</div>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
        @:@@section Scripts {
        @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
        @:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
    @:</body>
@:</html>
}
}
@functions
{
// Do we need to use this in conjunction with the PrimaryKey check?
bool IsPropertyGuid(IPropertyMetadata property)
{
    return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
}

string GetValueExpression(IPropertyMetadata property)
{
    return property.PropertyName;
}
}