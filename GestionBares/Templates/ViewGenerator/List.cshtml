@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:@@section styles{
        @:<link href="~/css/jquery.dataTables.min.css" rel="stylesheet" />
        @:<link href="~/css/buttons.dataTables.min.css" rel="stylesheet" />
        @:}
        @:
        @:<div class="container-fluid">
            @:<h3>Listado de @Model.ViewDataTypeShortName</h3>
            @:<hr />
            @:
        }
        else
        {
            @:@@{
            @:Layout = null;
            @:}
            @:
            @:<!DOCTYPE html>
            @:
            @:<html>
            @:<head>
                @:<meta name="viewport" content="width=device-width" />
                @:<title>@Model.ViewName</title>
            @:</head>
            @:<body>
                //    PushIndent("    ");
            }
            @:<p>
                @:<a class="btn btn-success" asp-action="Create">Nuevo @Model.ViewDataTypeShortName</a>
            @:</p>
            @:<table class="table dynamic">
                @:<thead>
                    @:<tr>
                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property) && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                            {
                                <th>
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                </th>
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                            {
                                <th>
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                </th>
                            }
                        }
                        @:<th></th>
                    @:</tr>
                @:</thead>
                @:<tbody>
                    @:@@foreach (var item in Model) {
                    @:<tr>
                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                            {
                                <td>
                                    @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
                                </td>
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                            {
                                <td>
                                    @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                </td>
                            }
                        }
                        string pkName = GetPrimaryKeyName();
                        if (pkName != null)
                        {
                            @:<td class="text-right col-md-3">
                                @:<a data-hint="Editar" class="btn btn-default btn-sm edit hint--top hint--warning" asp-action="Edit" asp-route-id="@@item.@pkName"><span class="fa fa-edit" aria-hidden="true"></span></a>
                                @:<a data-hint="Detalles" class="btn btn-info btn-sm view hint--top hint--info" asp-action="Details" asp-route-id="@@item.@pkName"><span class="fa fa-eye" aria-hidden="true"></span></a>
                                @:<a data-hint="Eliminar" class="btn btn-danger btn-sm delete hint--top hint--error" data-toggle="confirmation" data-title="Confirmar Acción" data-placement="top" data-singleton="true" asp-action="Eliminar" asp-route-id="@@item.@pkName"><span class="fa fa-trash" aria-hidden="true"></span></a>
                            @:</td>
                        }
                        else
                        {
                            <td>
                                @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                                @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                                @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                            </td>
                        }
                    @:</tr>
                    @:}
                @:</tbody>
            @:</table>
            @:</div>


    @:@@section scripts{
    @:<script src="~/js/datatables.min.js"></script>
    @:<script src="~/js/mbs-qdtf.js"></script>
    @:<script>
        @:$(document).ready(function () {
        @:});
    @:</script>
















    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
        @:</body>
        @:</html>
    }
}
@functions
{
string GetPrimaryKeyName()
{
    return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
    ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
    : null;
}

string GetValueExpression(IPropertyMetadata property)
{
    return property.PropertyName;
}

string GetValueExpression(INavigationMetadata navigation)
{
    return navigation.AssociationPropertyName;
}

string GetEnumerableTypeExpression(string typeName)
{
    return "IEnumerable<" + typeName + ">";
}
}}